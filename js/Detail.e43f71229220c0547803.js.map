{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/routes/Detail.js"],"names":["Detail","loadApi","detail","params","match","useEffect","apiName","useState","isOpen","onModalToggle","className","title","Link","to","isActive","loaded","error","Level","LevelItem","spec","info","Skeleton","size","SkeletonSize","Split","gutter","SplitItem","TextContent","Text","component","href","location","origin","latest","target","rel","Button","onClick","variant","ButtonVariant","Card","CardBody","deepLinking","docExpansion","onComplete","system","show","layoutActions","isShownKey","isShown","history","replaceState","pathname","CSS","escape","join","hash","length","found","document","querySelector","replace","scrollIntoView","split","Facebook","width","onClose","actions","key","displayDataTypes","shouldCollapse","name","src","propTypes","PropTypes","defaultProps","withRouter","connect","dispatch","api","onLoadOneApi","version"],"mappings":"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","file":"js/Detail.e43f71229220c0547803.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n  Main,\n} from '@redhat-cloud-services/frontend-components';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport SwaggerUI from 'swagger-ui-react';\nimport 'swagger-ui-react/swagger-ui.css';\nimport { onLoadOneApi } from '../store/actions';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components';\nimport { Facebook } from 'react-content-loader';\nimport {\n  CardBody,\n  Card,\n  Breadcrumb,\n  BreadcrumbItem,\n  Modal,\n  Button,\n  Level,\n  LevelItem,\n  ButtonVariant,\n  Split,\n  SplitItem,\n  TextContent,\n  Text,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport ReactJson from 'react-json-view';\n\nconst Detail = ({ loadApi, detail, match }) => {\n  const { params } = match;\n  useEffect(() => {\n    loadApi(params.apiName);\n  }, []);\n\n  const [isOpen, onModalToggle] = useState(false);\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle\n          title={\n            <React.Fragment>\n              <Breadcrumb>\n                <BreadcrumbItem>\n                  <Link to=\"/\">Overview</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem isActive>{params.apiName}</BreadcrumbItem>\n              </Breadcrumb>\n              <React.Fragment>\n                {detail.loaded && !detail.error && (\n                  <Level className=\"ins-c-docs__api-detail\">\n                    <LevelItem className=\"ins-c-docs__api-detail-info\">\n                      {detail.loaded ? (\n                        `Detail of ${detail.spec.info.title}`\n                      ) : (\n                        <Skeleton size={SkeletonSize.md} />\n                      )}\n                    </LevelItem>\n                    <LevelItem>\n                      <Split gutter=\"sm\">\n                        <SplitItem className=\"ins-c-docs__api-detail-info\">\n                          {detail.loaded && !detail.error ? (\n                            <TextContent>\n                              <Text\n                                component=\"a\"\n                                href={`${location.origin}${detail.latest}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                Open Raw <ExternalLinkAltIcon size=\"sm\" />\n                              </Text>\n                            </TextContent>\n                          ) : (\n                            <Skeleton size={SkeletonSize.mdmd} />\n                          )}\n                        </SplitItem>\n                        <SplitItem className=\"ins-c-docs__api-detail-info\">\n                          {detail.loaded ? (\n                            <Button\n                              onClick={() => onModalToggle(true)}\n                              variant={ButtonVariant.secondary}\n                            >\n                              Show JSON\n                            </Button>\n                          ) : (\n                            <Skeleton size={SkeletonSize.md} />\n                          )}\n                        </SplitItem>\n                      </Split>\n                    </LevelItem>\n                  </Level>\n                )}\n              </React.Fragment>\n            </React.Fragment>\n          }\n        />\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          <Card>\n            <CardBody>\n              {detail.loaded && (\n                <SwaggerUI\n                  deepLinking\n                  docExpansion=\"list\"\n                  spec={detail.spec}\n                  onComplete={(system) => {\n                    const {\n                      layoutActions: { show },\n                    } = system;\n                    system.layoutActions.show = (isShownKey, isShown) => {\n                      history.replaceState(\n                        {},\n                        '',\n                        `${location.pathname}#${CSS.escape(\n                          isShownKey.join('-')\n                        )}`\n                      );\n                      show(isShownKey, isShown);\n                    };\n\n                    if (location.hash && location.hash.length > 0) {\n                      const found = document.querySelector(\n                        `[id$='${location.hash\n                          .replace('#', '')\n                          .replace(/\\\\./g, '\\\\\\\\.')}']`\n                      );\n                      if (found) {\n                        found.scrollIntoView();\n                        show(\n                          location.hash\n                            .replace('#', '')\n                            .replace(/\\\\/g, '')\n                            .split('-'),\n                          true\n                        );\n                      }\n                    }\n                  }}\n                />\n              )}\n              {!detail.loaded && <Facebook />}\n            </CardBody>\n          </Card>\n        </React.Fragment>\n      </Main>\n      <Modal\n        width={'50%'}\n        title=\"Spec JSON\"\n        isOpen={isOpen}\n        onClose={() => onModalToggle(false)}\n        actions={[\n          <Button\n            key=\"close\"\n            variant={ButtonVariant.secondary}\n            onClick={() => onModalToggle(false)}\n          >\n            Close\n          </Button>,\n        ]}\n      >\n        <ReactJson\n          displayDataTypes={false}\n          shouldCollapse={({ name }) => name !== 'root' && name !== 'paths'}\n          src={detail.spec}\n        />\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nDetail.propTypes = {\n  loadApi: PropTypes.func,\n  detail: PropTypes.shape({\n    loaded: PropTypes.bool,\n    spec: PropTypes.string,\n    error: PropTypes.bool,\n    latest: PropTypes.string,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      apiName: PropTypes.string,\n    }),\n  }),\n};\nDetail.defaultProps = {\n  loadApi: () => undefined,\n  detail: {\n    loaded: false,\n  },\n};\n\nexport default withRouter(\n  connect(\n    ({ detail }) => ({\n      detail,\n    }),\n    (dispatch) => ({\n      loadApi: (api) => dispatch(onLoadOneApi({ name: api, version: 'v1' })),\n    })\n  )(Detail)\n);\n"],"sourceRoot":""}