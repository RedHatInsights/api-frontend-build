{"version":3,"file":"js/Detail.1656681669426.5069f8000f022bc6808e.js","mappings":"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","sources":["webpack:///./src/api/index.js","webpack:///./src/routes/Detail.js","webpack:///./src/Utilities/hooks.js","webpack:///./src/store/actions.js"],"sourcesContent":["import { versionMapper, DEFAULT_PREFIX } from './constants';\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { load } from 'js-yaml';\nexport { default as instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\n\nexport const apiList = () => {\n  return instance.get(`/${DEFAULT_PREFIX}`);\n};\n\nexport const generateUrl = (appName, appVersion) =>\n  `/${DEFAULT_PREFIX}/${appName}/${appVersion}/openapi.json`;\n\nexport const activeApi = () =>\n  instance\n    .get(`${insights.chrome.isBeta() ? '/beta' : ''}/config/main.yml`)\n    .then((data) => load(data))\n    .then((data) => ({\n      services: Object.keys(data)\n        .filter((oneAppKey) => data[oneAppKey].api)\n        .map((oneAppKey) => ({\n          appName: oneAppKey,\n          ...data[oneAppKey],\n        })),\n    }));\n\nexport const getSpec = (url, isGithub) => {\n  const spec = instance.get(url);\n  if (isGithub) {\n    return spec.then(({ content }) => load(Buffer.from(content, 'base64')));\n  }\n\n  return spec;\n};\n\nexport const isValidGithub = ({ owner, repo, content } = {}) => {\n  return owner && repo && content;\n};\n\nexport const oneApi = ({ name, version = 'v1', url: defaultUrl, github }) => {\n  const url = isValidGithub(github)\n    ? `https://api.github.com/repos/${github.owner}/${github.repo}/contents/${github.content}`\n    : defaultUrl ?? generateUrl(name, versionMapper[name] || version);\n  const spec = getSpec(url, isValidGithub(github));\n  return spec.then((data) => ({\n    ...data,\n    latest: url,\n    name,\n    servers: [\n      ...(data.servers || []),\n      { url: `/api/${name}/${versionMapper[name] || version}` },\n    ]\n      .filter(\n        (server, key, array) =>\n          array.findIndex(\n            ({ url }) =>\n              `${location.origin}${server.url}`.indexOf(url) === 0 ||\n              server.url.indexOf(url) === 0\n          ) === key\n      )\n      .map((server) => ({\n        ...server,\n        url:\n          server.url.indexOf('/') === 0\n            ? `${location.origin}${server.url}`\n            : server.url,\n      })),\n  }));\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SwaggerUI from 'swagger-ui-react';\nimport 'swagger-ui-react/swagger-ui.css';\nimport { onLoadOneApi } from '../store/actions';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Facebook } from 'react-content-loader';\nimport {\n  CardBody,\n  Card,\n  Breadcrumb,\n  BreadcrumbItem,\n  Modal,\n  Button,\n  Level,\n  LevelItem,\n  ButtonVariant,\n  Split,\n  SplitItem,\n  TextContent,\n  Text,\n} from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport ReactJson from 'react-json-view';\nimport { useQuery } from '../Utilities/hooks';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Detail = () => {\n  const dispatch = useDispatch();\n  const loaded = useSelector(({ detail: { loaded } }) => loaded);\n  const spec = useSelector(({ detail: { spec } }) => spec);\n  const error = useSelector(({ detail: { error } }) => error);\n  const latest = useSelector(({ detail: { latest } }) => latest);\n  const { apiName, version = 'v1' } = useParams();\n  const query = useQuery();\n  const { auth } = useChrome();\n  useEffect(() => {\n    dispatch(\n      onLoadOneApi({\n        name: apiName,\n        version,\n        url: query.get('url'),\n        github: {\n          owner: query.get('github-owner'),\n          repo: query.get('github-repo'),\n          content: query.get('github-content'),\n        },\n      })\n    );\n  }, []);\n\n  const requestInterceptor = useCallback(\n    async (req) => {\n      req.headers = {\n        ...(req.headers || {}),\n        Authorization: `Bearer ${await auth.getToken()}`,\n      };\n      return req;\n    },\n    [auth]\n  );\n\n  const [isOpen, onModalToggle] = useState(false);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle\n          title={\n            <React.Fragment>\n              <Breadcrumb>\n                <BreadcrumbItem>\n                  <Link to=\"/\">Overview</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem isActive>{apiName}</BreadcrumbItem>\n              </Breadcrumb>\n              <React.Fragment>\n                {loaded && !error && (\n                  <Level className=\"ins-c-docs__api-detail\">\n                    <LevelItem className=\"ins-c-docs__api-detail-info\">\n                      {loaded ? (\n                        `Detail of ${spec?.info?.title}`\n                      ) : (\n                        <Skeleton size={SkeletonSize.md} />\n                      )}\n                    </LevelItem>\n                    <LevelItem>\n                      <Split hasGutter>\n                        <SplitItem className=\"ins-c-docs__api-detail-info\">\n                          {loaded && !error ? (\n                            <TextContent>\n                              <Text\n                                component=\"a\"\n                                href={`${\n                                  latest.includes('https://')\n                                    ? ''\n                                    : location.origin\n                                }${latest}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                Open Raw <ExternalLinkAltIcon size=\"sm\" />\n                              </Text>\n                            </TextContent>\n                          ) : (\n                            <Skeleton size={SkeletonSize.mdmd} />\n                          )}\n                        </SplitItem>\n                        <SplitItem className=\"ins-c-docs__api-detail-info\">\n                          {loaded ? (\n                            <Button\n                              onClick={() => onModalToggle(true)}\n                              variant={ButtonVariant.secondary}\n                            >\n                              Show JSON\n                            </Button>\n                          ) : (\n                            <Skeleton size={SkeletonSize.md} />\n                          )}\n                        </SplitItem>\n                      </Split>\n                    </LevelItem>\n                  </Level>\n                )}\n              </React.Fragment>\n            </React.Fragment>\n          }\n        />\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          <Card>\n            <CardBody>\n              {loaded && (\n                <SwaggerUI\n                  deepLinking\n                  docExpansion=\"list\"\n                  spec={spec}\n                  requestInterceptor={requestInterceptor}\n                  onComplete={(system) => {\n                    const {\n                      layoutActions: { show },\n                    } = system;\n                    system.layoutActions.show = (isShownKey, isShown) => {\n                      const pathName = location.pathname;\n                      show(isShownKey, isShown);\n                      history.replaceState(\n                        {},\n                        '',\n                        `${pathName}#${CSS.escape(isShownKey.join('-'))}`\n                      );\n                    };\n\n                    if (location.hash && location.hash.length > 0) {\n                      const found = document.querySelector(\n                        `[id$='${location.hash\n                          .replace('#', '')\n                          .replace(/\\\\./g, '\\\\\\\\.')}']`\n                      );\n                      if (found) {\n                        found.scrollIntoView();\n                        show(\n                          location.hash\n                            .replace('#', '')\n                            .replace(/\\\\/g, '')\n                            .split('-'),\n                          true\n                        );\n                      }\n                    }\n                  }}\n                />\n              )}\n              {!loaded && <Facebook />}\n            </CardBody>\n          </Card>\n        </React.Fragment>\n      </Main>\n      <Modal\n        width={'50%'}\n        title=\"Spec JSON\"\n        isOpen={isOpen}\n        onClose={() => onModalToggle(false)}\n        actions={[\n          <Button\n            key=\"close\"\n            variant={ButtonVariant.secondary}\n            onClick={() => onModalToggle(false)}\n          >\n            Close\n          </Button>,\n        ]}\n      >\n        <ReactJson\n          displayDataTypes={false}\n          shouldCollapse={({ name }) => name !== 'root' && name !== 'paths'}\n          src={spec}\n        />\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default Detail;\n","import { useLocation } from 'react-router-dom';\nexport const useQuery = () => new URLSearchParams(useLocation().search);\n","import { LOAD_ALL, LOAD_ONE_API, SELECT_ROW } from './actionTypes';\nimport { activeApi, oneApi } from '../api';\n\nexport const onLoadApis = () => ({\n  type: LOAD_ALL,\n  payload: activeApi(),\n});\n\nexport const onLoadOneApi = (data) => ({\n  type: LOAD_ONE_API,\n  payload: oneApi(data),\n});\n\nexport const onSelectRow = (data) => ({\n  type: SELECT_ROW,\n  payload: data,\n});\n"],"names":["activeApi","instance","insights","chrome","isBeta","then","data","load","services","Object","keys","filter","oneAppKey","api","map","appName","isValidGithub","owner","repo","content","oneApi","appVersion","name","version","defaultUrl","url","github","versionMapper","DEFAULT_PREFIX","spec","isGithub","Buffer","from","getSpec","latest","servers","server","key","array","findIndex","location","origin","indexOf","dispatch","useDispatch","loaded","useSelector","detail","error","useParams","apiName","query","URLSearchParams","useLocation","search","auth","useChrome","useEffect","onLoadOneApi","get","requestInterceptor","useCallback","req","headers","getToken","Authorization","useState","isOpen","onModalToggle","PageHeader","className","PageHeaderTitle","title","Breadcrumb","BreadcrumbItem","Link","to","isActive","Level","LevelItem","info","Skeleton","size","SkeletonSize","Split","hasGutter","SplitItem","TextContent","Text","component","href","includes","target","rel","Button","onClick","variant","ButtonVariant","Main","Card","CardBody","deepLinking","docExpansion","onComplete","system","show","layoutActions","isShownKey","isShown","pathName","pathname","history","replaceState","CSS","escape","join","hash","length","found","document","querySelector","replace","scrollIntoView","split","Modal","width","onClose","actions","displayDataTypes","shouldCollapse","src","onLoadApis","type","LOAD_ALL","payload","LOAD_ONE_API","onSelectRow","SELECT_ROW"],"sourceRoot":""}