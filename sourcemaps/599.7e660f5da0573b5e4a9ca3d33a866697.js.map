{"version":3,"file":"js/599.2bfc2d729af79abad482.js","mappings":"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","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/api/constants.js","webpack:///./src/store/actionTypes.js","webpack:///./src/store/reducers.js","webpack:///./src/store/index.js"],"sourcesContent":["import { Route, Switch } from 'react-router-dom';\nimport React, { lazy, Suspense, Fragment } from 'react';\nconst Overview = lazy(() =>\n  import(/* webpackChunkName: \"Overview\" */ './routes/Overview')\n);\nconst Detail = lazy(() =>\n  import(/* webpackChunkName: \"Detail\" */ './routes/Detail')\n);\n\nconst paths = {\n  overview: '/',\n  detail: '/:apiName',\n  detailVersioned: '/:apiName/:version',\n};\n\nexport const Routes = () => {\n  return (\n    <Suspense fallback={<Fragment />}>\n      <Switch>\n        <Route exact path={paths.overview} component={Overview} />\n        <Route exact path={paths.detail} component={Detail} />\n        <Route exact path={paths.detailVersioned} component={Detail} />\n        <Route component={Overview} />\n      </Switch>\n    </Suspense>\n  );\n};\n","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nconst App = () => {\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.identifyApp('api-docs');\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </React.Fragment>\n  );\n};\n\nApp.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default App;\n","export const DEFAULT_PREFIX = 'api';\n\nexport const versionMapper = {\n  'aiops-clustering': 'v1.0',\n  'aiops-idle-cost-savings': 'v1.0',\n  'aiops-instance-type-validation': 'v1.0',\n  'aiops-outlier-detection': 'v1.0',\n  xavier: 'v1.0',\n};\n","export const LOAD_ALL = 'LOAD_ALL';\nexport const LOAD_ONE_API = 'LOAD_ONE_API';\nexport const SELECT_ROW = 'SELECT_ROW';\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport * as ACTIONS from './actionTypes';\nimport { versionMapper } from '../api/constants';\n\nconst defaultState = { loaded: false, selectedRows: {} };\nconst disabledApis = [\n  'automation-analytics',\n  'openshift',\n  'ruledev',\n  'ingress',\n];\n\nconst getAppName = (service) =>\n  (service.api.alias && service.api.alias[0]) || service.appName;\n\nfunction dataLoaded(state, { payload }) {\n  return {\n    ...state,\n    endpoints:\n      payload &&\n      payload.services\n        .filter(\n          (service) =>\n            !disabledApis.includes(service.appName) &&\n            (!service.api.isBeta || insights.chrome.isBeta())\n        )\n        .map((service) => ({\n          ...service,\n          version:\n            versionMapper[getAppName(service)] || service?.api?.versions?.[0],\n          appName: getAppName(service),\n          apiName: service.api.apiName,\n        })),\n    loaded: true,\n  };\n}\n\nfunction detailLoaded(state, { payload: { latest, ...payload } }) {\n  return {\n    ...state,\n    spec: payload,\n    latest,\n    loaded: true,\n  };\n}\n\nfunction onSelectRow(state, { payload: { isSelected, row } }) {\n  const selectedRows = {\n    ...(state.selectedRows || {}),\n    ...(Array.isArray(row)\n      ? row.reduce(\n          (acc, curr) => ({\n            ...acc,\n            [`${row.subItems ? 'parent-' : ''}${curr.cells[0].value}`]: {\n              isSelected,\n              appName: curr.cells[0].value,\n              version: curr.cells[2].value,\n              ...(curr.subItems && {\n                subItems: curr.subItems,\n              }),\n            },\n          }),\n          {}\n        )\n      : {\n          [`${row.subItems ? 'parent-' : ''}${row.cells[0].value}`]: {\n            isSelected,\n            appName: row.cells[0].value,\n            version: row.cells[2].value,\n            ...(row.subItems && {\n              subItems: row.subItems,\n            }),\n          },\n        }),\n  };\n\n  return {\n    ...state,\n    selectedRows,\n  };\n}\n\nexport const services = applyReducerHash(\n  {\n    [`${ACTIONS.LOAD_ALL}_FULFILLED`]: dataLoaded,\n    [`${ACTIONS.LOAD_ALL}_PENDING`]: () => defaultState,\n    [ACTIONS.SELECT_ROW]: onSelectRow,\n  },\n  defaultState\n);\n\nexport const detail = applyReducerHash(\n  {\n    [`${ACTIONS.LOAD_ONE_API}_FULFILLED`]: detailLoaded,\n    [`${ACTIONS.LOAD_ONE_API}_PENDING`]: () => ({ loaded: false }),\n    [`${ACTIONS.LOAD_ONE_API}_REJECTED`]: () => ({ loaded: true, error: true }),\n  },\n  defaultState\n);\n","import { createContext } from 'react';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { services, detail } from './reducers';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  const registry = new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorDescriptionKey: ['detail', 'stack'],\n    }),\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register({ services, detail, notifications: notificationsReducer });\n\n  //If you want to register all of your reducers, this is good place.\n  /*\n   *  registry.register({\n   *    someName: (state, action) => ({...state})\n   *  });\n   */\n  return registry;\n}\n"],"names":["Overview","lazy","Detail","Routes","Suspense","fallback","Fragment","Switch","Route","exact","path","component","App","useEffect","insights","chrome","init","identifyApp","propTypes","history","PropTypes","DEFAULT_PREFIX","versionMapper","xavier","LOAD_ALL","LOAD_ONE_API","SELECT_ROW","defaultState","loaded","selectedRows","disabledApis","getAppName","service","api","alias","appName","services","applyReducerHash","ACTIONS","state","payload","endpoints","filter","includes","isBeta","map","version","versions","apiName","isSelected","row","Array","isArray","reduce","acc","curr","subItems","cells","value","detail","latest","spec","error","RegistryContext","createContext","getRegistry","middleware","registry","ReducerRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","item","register","notifications","notificationsReducer"],"sourceRoot":""}