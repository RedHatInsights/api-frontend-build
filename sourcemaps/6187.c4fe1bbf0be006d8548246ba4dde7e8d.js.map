{"version":3,"file":"js/6187.1666094722583.646371a7c58f3f13eeed.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/api/constants.js","webpack:///./src/store/actionTypes.js","webpack:///./src/store/index.js","webpack:///./src/store/reducers.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n  const chrome = useChrome();\n  useEffect(() => {\n    if (chrome) {\n      const { identifyApp } = chrome.init();\n      identifyApp(CRC_APP_NAME);\n    }\n  }, [chrome]);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </React.Fragment>\n  );\n};\n\nApp.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default App;\n","import React, { useRef } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport PropTypes from 'prop-types';\nimport logger from 'redux-logger';\n\nconst AppEntry = ({ isDev }) => {\n  // cannot be in a render as it will create multiple store instances during a render and a race condition when accessing the context\n  const registry = useRef(isDev ? init(logger) : init());\n  return (\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry.current,\n      }}\n    >\n      <Provider store={registry.current.getStore()}>\n        <Router basename={getBaseName(window.location.pathname)}>\n          <App />\n        </Router>\n      </Provider>\n    </RegistryContext.Provider>\n  );\n};\n\nAppEntry.propTypes = {\n  isDev: PropTypes.bool,\n};\n\nexport default AppEntry;\n","import { Route, Routes as DomRoutes } from 'react-router-dom';\nimport React, { lazy, Suspense, Fragment } from 'react';\nconst Overview = lazy(() =>\n  import(/* webpackChunkName: \"Overview\" */ './routes/Overview')\n);\nconst Detail = lazy(() =>\n  import(/* webpackChunkName: \"Detail\" */ './routes/Detail')\n);\n\nconst paths = {\n  overview: '/',\n  detail: '/:apiName',\n  detailVersioned: '/:apiName/:version',\n};\n\nexport const Routes = () => {\n  return (\n    <Suspense fallback={<Fragment />}>\n      <DomRoutes>\n        <Route exact path={paths.overview} element={<Overview />} />\n        <Route exact path={paths.detail} element={<Detail />} />\n        <Route exact path={paths.detailVersioned} element={<Detail />} />\n        <Route element={<Overview />} />\n      </DomRoutes>\n    </Suspense>\n  );\n};\n","export const DEFAULT_PREFIX = 'api';\n\nexport const versionMapper = {\n  'aiops-clustering': 'v1.0',\n  'aiops-idle-cost-savings': 'v1.0',\n  'aiops-instance-type-validation': 'v1.0',\n  'aiops-outlier-detection': 'v1.0',\n  xavier: 'v1.0',\n};\n","export const LOAD_ALL = 'LOAD_ALL';\nexport const LOAD_ONE_API = 'LOAD_ONE_API';\nexport const SELECT_ROW = 'SELECT_ROW';\n","import { createContext } from 'react';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { services, detail } from './reducers';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  const registry = new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorDescriptionKey: ['detail', 'stack'],\n    }),\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register({ services, detail, notifications: notificationsReducer });\n\n  //If you want to register all of your reducers, this is good place.\n  /*\n   *  registry.register({\n   *    someName: (state, action) => ({...state})\n   *  });\n   */\n  return registry;\n}\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport * as ACTIONS from './actionTypes';\nimport { versionMapper } from '../api/constants';\n\nconst defaultState = { loaded: false, selectedRows: {} };\nconst disabledApis = [\n  'automation-analytics',\n  'openshift',\n  'ruledev',\n  'ingress',\n];\n\nconst getAppName = (service) =>\n  (service.api.alias && service.api.alias[0]) || service.appName;\n\nfunction dataLoaded(state, { payload }) {\n  return {\n    ...state,\n    endpoints:\n      payload &&\n      payload.services\n        .filter(\n          (service) =>\n            !disabledApis.includes(service.appName) &&\n            (!service.api.isBeta || insights.chrome.isBeta())\n        )\n        .map((service) => ({\n          ...service,\n          version:\n            versionMapper[getAppName(service)] || service?.api?.versions?.[0],\n          appName: getAppName(service),\n          apiName: service.api.apiName,\n        })),\n    loaded: true,\n  };\n}\n\nfunction detailLoaded(state, { payload: { latest, ...payload } }) {\n  return {\n    ...state,\n    spec: payload,\n    latest,\n    loaded: true,\n  };\n}\n\nfunction onSelectRow(state, { payload: { isSelected, row } }) {\n  const selectedRows = {\n    ...(state.selectedRows || {}),\n    ...(Array.isArray(row)\n      ? row.reduce(\n          (acc, curr) => ({\n            ...acc,\n            [`${row.subItems ? 'parent-' : ''}${curr.cells[0].value}`]: {\n              isSelected,\n              appName: curr.cells[0].value,\n              url: curr.cells[1].value,\n              version: curr.cells[2].value,\n              ...(curr.subItems && {\n                subItems: curr.subItems,\n              }),\n            },\n          }),\n          {}\n        )\n      : {\n          [`${row.subItems ? 'parent-' : ''}${row.cells[0].value}`]: {\n            isSelected,\n            appName: row.cells[0].value,\n            url: row.cells[1].value,\n            version: row.cells[2].value,\n            ...(row.subItems && {\n              subItems: row.subItems,\n            }),\n          },\n        }),\n  };\n\n  return {\n    ...state,\n    selectedRows,\n  };\n}\n\nexport const services = applyReducerHash(\n  {\n    [`${ACTIONS.LOAD_ALL}_FULFILLED`]: dataLoaded,\n    [`${ACTIONS.LOAD_ALL}_PENDING`]: () => defaultState,\n    [ACTIONS.SELECT_ROW]: onSelectRow,\n  },\n  defaultState\n);\n\nexport const detail = applyReducerHash(\n  {\n    [`${ACTIONS.LOAD_ONE_API}_FULFILLED`]: detailLoaded,\n    [`${ACTIONS.LOAD_ONE_API}_PENDING`]: () => ({ loaded: false }),\n    [`${ACTIONS.LOAD_ONE_API}_REJECTED`]: () => ({ loaded: true, error: true }),\n  },\n  defaultState\n);\n"],"names":["App","chrome","useChrome","useEffect","identifyApp","init","CRC_APP_NAME","propTypes","history","PropTypes","AppEntry","isDev","registry","useRef","logger","value","getRegistry","current","store","getStore","basename","getBaseName","window","location","pathname","Overview","lazy","Detail","Routes","Suspense","fallback","Fragment","Route","exact","path","element","DEFAULT_PREFIX","versionMapper","xavier","LOAD_ALL","LOAD_ONE_API","SELECT_ROW","RegistryContext","createContext","middleware","ReducerRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","filter","item","register","services","detail","notifications","notificationsReducer","defaultState","loaded","selectedRows","disabledApis","getAppName","service","api","alias","appName","applyReducerHash","ACTIONS","state","payload","endpoints","includes","isBeta","insights","map","version","versions","apiName","isSelected","row","Array","isArray","reduce","acc","curr","subItems","cells","url","latest","spec","error"],"sourceRoot":""}