{"version":3,"file":"js/exposed-./RootApp.8c368b7eac58ae22c725.js","mappings":"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","sources":["webpack:///./src/store/reducers.ts","webpack:///./src/store/index.ts","webpack:///./src/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/api/constants.ts","webpack:///./src/store/actionTypes.ts"],"sourcesContent":["import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport * as ACTIONS from './actionTypes';\nimport { versionMapper } from '../api/constants';\nimport { Row, Service, ServicesState } from './store';\n\nconst defaultState = { loaded: false, selectedRows: {} };\nconst disabledApis = ['automation-analytics', 'openshift', 'ruledev'];\n\nconst getAppName = (service: Service) =>\n  (service.api.alias && service.api.alias[0]) || service.appName;\n\nfunction dataLoaded(\n  state: ServicesState,\n  {\n    payload,\n  }: {\n    payload: {\n      services: Service[];\n    };\n  }\n) {\n  return {\n    ...state,\n    endpoints:\n      payload &&\n      payload.services\n        .filter(\n          (service) =>\n            !disabledApis.includes(service.appName) &&\n            // eslint-disable-next-line rulesdir/no-chrome-api-call-from-window\n            (!service.api.isBeta || window.insights.chrome.isBeta())\n        )\n        .map((service) => ({\n          ...service,\n          version:\n            versionMapper[getAppName(service)] || service?.api?.versions?.[0],\n          appName: getAppName(service),\n          apiName: service.api.apiName,\n        })),\n    loaded: true,\n  };\n}\n\nfunction detailLoaded(\n  state: ServicesState,\n  {\n    payload: { latest, ...payload },\n  }: {\n    payload: Record<string, unknown> & {\n      latest: boolean;\n    };\n  }\n) {\n  return {\n    ...state,\n    spec: payload,\n    latest,\n    loaded: true,\n  };\n}\n\nfunction onSelectRow(\n  state: ServicesState,\n  {\n    payload: { isSelected, row },\n  }: {\n    payload: {\n      isSelected: boolean;\n      row: Row;\n    };\n  }\n) {\n  const selectedRows = {\n    ...(state.selectedRows || {}),\n    ...(Array.isArray(row)\n      ? row.reduce(\n          (acc, curr) => ({\n            ...acc,\n            [`${row.subItems ? 'parent-' : ''}${curr.cells[0].value}`]: {\n              isSelected,\n              appName: curr.cells[0].value,\n              url: curr.cells[1].value,\n              version: curr.cells[2].value,\n              ...(curr.subItems && {\n                subItems: curr.subItems,\n              }),\n            },\n          }),\n          {}\n        )\n      : {\n          [`${row.subItems ? 'parent-' : ''}${row.cells[0].value}`]: {\n            isSelected,\n            appName: row.cells[0].value,\n            url: row.cells[1].value,\n            version: row.cells[2].value,\n            ...(row.subItems && {\n              subItems: row.subItems,\n            }),\n          },\n        }),\n  };\n\n  return {\n    ...state,\n    selectedRows,\n  };\n}\n\nexport const services = applyReducerHash(\n  {\n    [`${ACTIONS.LOAD_ALL}_FULFILLED`]: dataLoaded,\n    [`${ACTIONS.LOAD_ALL}_PENDING`]: () => defaultState,\n    [ACTIONS.SELECT_ROW]: onSelectRow,\n  },\n  defaultState\n);\n\nexport const detail = applyReducerHash(\n  {\n    [`${ACTIONS.LOAD_ONE_API}_FULFILLED`]: detailLoaded,\n    [`${ACTIONS.LOAD_ONE_API}_PENDING`]: () => ({ loaded: false }),\n    [`${ACTIONS.LOAD_ONE_API}_REJECTED`]: () => ({ loaded: true, error: true }),\n  },\n  defaultState\n);\n","import { createContext } from 'react';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { detail, services } from './reducers';\nimport { Middleware } from 'redux';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware: Middleware[]) {\n  const registry = new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorDescriptionKey: ['detail', 'stack'],\n    }),\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register({\n    services,\n    detail,\n    notifications: notificationsReducer as typeof detail,\n  });\n\n  //If you want to register all of your reducers, this is good place.\n  /*\n   *  registry.register({\n   *    someName: (state, action) => ({...state})\n   *  });\n   */\n  return registry;\n}\n","import { Routes as DomRoutes, Route } from 'react-router-dom';\nimport React, { Fragment, Suspense, lazy } from 'react';\nconst Overview = lazy(\n  () => import(/* webpackChunkName: \"Overview\" */ './routes/Overview')\n);\nconst Detail = lazy(\n  () => import(/* webpackChunkName: \"Detail\" */ './routes/Detail')\n);\n\nconst paths = {\n  overview: '*',\n  detail: ':apiName/*',\n  detailVersioned: ':apiName/:version/*',\n};\n\nexport const Routes = () => {\n  return (\n    <Suspense fallback={<Fragment />}>\n      <DomRoutes>\n        <Route path={paths.detail} element={<Detail />} />\n        <Route path={paths.detailVersioned} element={<Detail />} />\n        <Route path={paths.overview} element={<Overview />} />\n      </DomRoutes>\n    </Suspense>\n  );\n};\n","import React, { useEffect } from 'react';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n  const { updateDocumentTitle } = useChrome();\n  useEffect(() => {\n    updateDocumentTitle('API Documentation');\n  }, [updateDocumentTitle]);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React, { useRef } from 'react';\nimport { Provider } from 'react-redux';\nimport { RegistryContext, init } from './store';\nimport App from './App';\nimport PropTypes from 'prop-types';\nimport logger from 'redux-logger';\n\nconst AppEntry = ({ isDev }: { isDev?: boolean }) => {\n  // cannot be in a render as it will create multiple store instances during a render and a race condition when accessing the context\n  const registry = useRef(isDev ? init(logger) : init());\n  return (\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry.current,\n      }}\n    >\n      <Provider store={registry.current.getStore()}>\n        <App />\n      </Provider>\n    </RegistryContext.Provider>\n  );\n};\n\nAppEntry.propTypes = {\n  isDev: PropTypes.bool,\n};\n\nexport default AppEntry;\n","export const DEFAULT_PREFIX = 'api';\n\nexport const versionMapper: {\n  [serviceName: string]: string;\n} = {\n  'aiops-clustering': 'v1.0',\n  'aiops-idle-cost-savings': 'v1.0',\n  'aiops-instance-type-validation': 'v1.0',\n  'aiops-outlier-detection': 'v1.0',\n  xavier: 'v1.0',\n};\n","export const LOAD_ALL = 'LOAD_ALL';\nexport const LOAD_ONE_API = 'LOAD_ONE_API';\nexport const SELECT_ROW = 'SELECT_ROW';\n"],"names":["defaultState","loaded","selectedRows","disabledApis","getAppName","service","api","alias","appName","services","state","payload","endpoints","filter","includes","isBeta","window","insights","chrome","map","version","versions","apiName","isSelected","row","Array","isArray","reduce","acc","curr","subItems","cells","value","url","detail","latest","spec","error","RegistryContext","createContext","getRegistry","init","middleware","registry","ReducerRegistry","notificationsMiddleware","errorDescriptionKey","item","register","notifications","Overview","lazy","Detail","Routes","Suspense","fallback","Fragment","Route","path","element","updateDocumentTitle","useChrome","useEffect","AppEntry","isDev","useRef","Provider","current","store","getStore","propTypes","DEFAULT_PREFIX","versionMapper","xavier","LOAD_ALL","LOAD_ONE_API","SELECT_ROW"],"sourceRoot":""}