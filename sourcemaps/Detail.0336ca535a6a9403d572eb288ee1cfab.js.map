{"version":3,"file":"js/Detail.8c368b7eac58ae22c725.js","mappings":"oHAAO,MAAMA,EAAW,W,6GCMjB,MAOMC,EAAY,CAACC,EAAiBC,IACzC,KACGC,IACC,iCAAiCF,EAAS,OAAS,YACjDC,EAAS,OAAS,oBAGrBE,MAAMC,IAAS,QAAKA,KACpBD,MAAMC,IAAS,CACdC,SAAUC,OAAOC,KAAKH,GACnBI,QAAQC,GAAcL,EAAKK,GAAWC,MACtCC,KAAKF,IAAc,CAClBG,QAASH,KACNL,EAAKK,WAsBLI,EAAgB,CAC3BC,EAA8B,CAAC,OAErBA,EAAKC,OAASD,EAAKE,MAAQF,EAAKG,SAG/BC,EAAS,EACpBC,OACAC,UAAU,KACVC,IAAKC,EACLC,aAOA,MAAMF,EAAMR,EAAcU,GACtB,gCAAgCA,EAAOR,SAASQ,EAAOP,iBAAiBO,EAAON,UAC/EK,IAzDsBV,EAyDIO,EAzDaK,EAyDP,IAAcL,IAASC,EAxD3D,IAAI,OAAkBR,KAAWY,kBADR,IAACZ,EAAiBY,EA0D3C,MAAMC,EAtCe,EACrBJ,EACAK,KAEA,MAAMD,EAAO,KAASvB,IAAiCmB,GACvD,OAAIK,EACKD,EAAKtB,MACV,EAAGc,cAED,QAAKU,EAAOC,KAAKX,EAAS,UAAUY,SAAS,YAM5CJ,CAAI,EAuBEK,CAAQT,EAAKR,EAAcU,IACxC,OAAOE,EAAKtB,MAAMC,IAAS,IACtBA,EACH2B,OAAQV,EACRF,OACAa,QAAS,IACH5B,EAAK4B,SAAW,GACpB,CAAEX,IAAK,QAAQF,KAAQ,IAAcA,IAASC,MAE7CZ,QACC,CAACyB,EAAQC,EAAKC,IACZA,EAAMC,WACJ,EAAGf,SACkD,IAAnD,GAAGgB,SAASC,SAASL,EAAOZ,MAAMkB,QAAQlB,IACd,IAA5BY,EAAOZ,IAAIkB,QAAQlB,OACjBa,IAETvB,KAAKsB,IAAW,IACZA,EACHZ,IAC8B,IAA5BY,EAAOZ,IAAIkB,QAAQ,KACf,GAAGF,SAASC,SAASL,EAAOZ,MAC5BY,EAAOZ,WAEhB,C,8UC3CL,MA8LA,EA9Le,KACb,MAAMmB,GAAW,UACXC,GAAS,SAAY,EAAGC,QAAUD,aAA2BA,IAC7DhB,GAAO,SAAY,EAAGiB,QAAUjB,WAAyBA,IACzDkB,GAAQ,SAAY,EAAGD,QAAUC,YAA0BA,IAC3DZ,GAAS,SAAY,EAAGW,QAAUX,aAA2BA,KAC7D,QAAEa,EAAO,QAAExB,EAAU,OAAS,IAAAyB,aAC9BC,GAAW,IAAAC,eACXC,ECxDsB,IAAIC,iBAAgB,IAAAC,eAAcC,SDyDxD,KAAEC,IAAS,EAAAC,EAAA,MACjB,IAAAC,YAAU,KACRd,GACE,QAAa,CACXrB,KAAMyB,EACNxB,UACAC,IAAK2B,EAAM9C,IAAI,OACfqB,OAAQ,CACNR,MAAOiC,EAAM9C,IAAI,gBACjBc,KAAMgC,EAAM9C,IAAI,eAChBe,QAAS+B,EAAM9C,IAAI,qBAGxB,GACA,IAEH,MAAMqD,GAAqB,IAAAC,cACzBC,MAAOC,IACLA,EAAIC,QAAU,IACRD,EAAIC,SAAW,CAAC,EACpBC,cAAe,gBAAgBR,EAAKS,cAE/BH,IAET,CAACN,KAGIU,EAAQC,IAAiB,IAAAC,WAAS,GAEzC,OACE,kBAAC,aAAc,KACb,kBAACC,EAAA,EAAU,CAACC,UAAU,cACpB,kBAACC,EAAA,EAAe,CACdC,MACE,kBAAC,aAAc,KACb,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,KAAI,CAACC,GAAI,KAAQ,aAEpB,kBAAC,EAAAF,eAAc,CAACG,UAAQ,GAAE7B,IAE5B,kBAAC,aAAc,KACZH,IAAWE,GACV,kBAAC,EAAA+B,MAAK,CAACR,UAAU,0BACf,kBAAC,EAAAS,UAAS,CAACT,UAAU,+BAClBzB,EAAS,aACKhB,GAAMmD,MAAMR,QAEzB,kBAACS,EAAA,EAAQ,CAACC,KAAMD,EAAA,EAAaE,MAGjC,kBAAC,EAAAJ,UAAS,KACR,kBAAC,EAAAK,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAC,UAAS,CAAChB,UAAU,+BAClBzB,IAAWE,EACV,kBAAC,EAAAwC,YAAW,KACV,kBAAC,EAAAC,KAAI,CACHC,UAAU,IACVC,KAAM,GACJvD,EAAOwD,SAAS,YACZ,GACAlD,SAASC,SACZP,IACHyD,OAAO,SACPC,IAAI,uB,WAGJ,kBAAC,EAAAC,KAAI,CAACZ,KAAK,MACT,kBAAC,IAAmB,SAK1B,kBAACD,EAAA,EAAQ,CAACC,KAAMD,EAAA,EAAaE,MAGjC,kBAAC,EAAAG,UAAS,CAAChB,UAAU,+BAClBzB,EACC,kBAAC,EAAAkD,OAAM,CACLC,QAAS,IAAM7B,GAAc,GAC7B8B,QAAS,EAAAC,cAAcC,WAAS,aAKlC,kBAAClB,EAAA,EAAQ,CAACC,KAAMD,EAAA,EAAaE,cAYnD,kBAACiB,EAAA,GAAI,KACH,kBAAC,aAAc,KACb,kBAAC,EAAAC,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACNzD,GACC,kBAAC,IAAS,CACR0D,aAAa,UACRnD,EAAM9C,IAAI,aAAe,CAC5BkG,uBAAwB,CAAC,KAE3B3E,KAAMA,EACN8B,mBAAoBA,EACpB8C,WAAaC,IACX,MACEC,eAAe,KAAEC,IACfF,EAgBJ,GAfAA,EAAOC,cAAcC,KAAO,CAC1BC,EACAC,KAEA,MAAMC,EAAUC,IAAIC,OAAOJ,EAAWK,KAAK,MACrCC,EAAU1E,SAAS2E,MAAMC,QAAQ,IAAK,IAC5CT,EAAKC,EAAYC,GACbA,GAAWC,IAAYI,GACzBjE,EACE,GAAG,OAAYF,KAAWxB,KAAW4B,EAAMnB,cAAc8E,IACzD,CAAEM,SAAS,G,EAKb5E,SAAS2E,MAAQ3E,SAAS2E,KAAKE,OAAS,EAAG,CAC7C,MAAMC,EAAQC,SAASC,cACrB,SAAShF,SAAS2E,KACfC,QAAQ,IAAK,IACbA,QAAQ,OAAQ,cAEjBE,IACFA,EAAMG,iBACNd,EACEnE,SAAS2E,KACNC,QAAQ,IAAK,IACbA,QAAQ,MAAO,IACfM,MAAM,MACT,G,MAOV9E,GAAU,kBAAC,KAAQ,UAK7B,kBAAC,EAAA+E,MAAK,CACJC,MAAO,MACPrD,MAAM,YACNN,OAAQA,EACR4D,QAAS,IAAM3D,GAAc,GAC7B4D,QAAS,CACP,kBAAC,EAAAhC,OAAM,CACLzD,IAAI,QACJ2D,QAAS,EAAAC,cAAcC,UACvBH,QAAS,IAAM7B,GAAc,IAAM,WAMvC,kBAAC,IAAS,CACR6D,kBAAkB,EAClBC,eAAgB,EAAG1G,UAAoB,SAATA,GAA4B,UAATA,EACjD2G,IAAKrG,EACLsG,gBAAiB,EAAGD,SAClBE,UAAUC,UAAUC,UAAUC,KAAKC,UAAUN,EAAK,KAAM,OAKjE,C,6FExOI,MAAMO,EAAa,CAACrI,EAAiBC,KAAoB,CAC9DqI,KAAM,KACNC,SAAS,QAAUvI,EAAQC,KAGhBuI,EAAgBpI,IAKvB,CACJkI,KAAM,IACNC,SAAS,QAAOnI,KAGLqI,EAAerI,IAGtB,CACJkI,KAAM,KACNC,QAASnI,G","sources":["webpack:///./src/Utilities/const.ts","webpack:///./src/api/index.ts","webpack:///./src/routes/Detail.tsx","webpack:///./src/Utilities/hooks.ts","webpack:///./src/store/actions.ts"],"sourcesContent":["export const BASENAME = '/docs/api';\n","import { DEFAULT_PREFIX, versionMapper } from './constants';\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { load } from 'js-yaml';\nimport { GitHubConfig } from '../store/store';\nexport { default as instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\n\nexport const apiList = () => {\n  return instance.get(`/${DEFAULT_PREFIX}`);\n};\n\nexport const generateUrl = (appName: string, appVersion: string) =>\n  `/${DEFAULT_PREFIX}/${appName}/${appVersion}/openapi.json`;\n\nexport const activeApi = (isBeta: boolean, isProd: boolean) =>\n  instance\n    .get<string, string>(\n      `/api/chrome-service/v1/static/${isBeta ? 'beta' : 'stable'}/${\n        isProd ? 'prod' : 'stage'\n      }/main.yml`\n    )\n    .then((data) => load(data) as Record<string, any>)\n    .then((data) => ({\n      services: Object.keys(data)\n        .filter((oneAppKey) => data[oneAppKey].api)\n        .map((oneAppKey) => ({\n          appName: oneAppKey,\n          ...data[oneAppKey],\n        })),\n    }));\n\nexport const getSpec = (\n  url: string,\n  isGithub?: boolean\n): Promise<Record<string, any>> => {\n  const spec = instance.get<object, Record<string, any>>(url);\n  if (isGithub) {\n    return spec.then(\n      ({ content }) =>\n        // TODO: Check if works toString from buffer\n        load(Buffer.from(content, 'base64').toString('utf-8')) as Promise<\n          Record<string, any>\n        >\n    );\n  }\n\n  return spec;\n};\n\nexport const isValidGithub = (\n  item: Partial<GitHubConfig> = {}\n): item is GitHubConfig => {\n  return !!(item.owner && item.repo && item.content);\n};\n\nexport const oneApi = ({\n  name,\n  version = 'v1',\n  url: defaultUrl,\n  github,\n}: {\n  name: string;\n  version?: string;\n  url?: string;\n  github?: Partial<GitHubConfig>;\n}) => {\n  const url = isValidGithub(github)\n    ? `https://api.github.com/repos/${github.owner}/${github.repo}/contents/${github.content}`\n    : defaultUrl ?? generateUrl(name, versionMapper[name] || version);\n  const spec = getSpec(url, isValidGithub(github));\n  return spec.then((data) => ({\n    ...data,\n    latest: url,\n    name,\n    servers: [\n      ...(data.servers || []),\n      { url: `/api/${name}/${versionMapper[name] || version}` },\n    ]\n      .filter(\n        (server, key, array) =>\n          array.findIndex(\n            ({ url }) =>\n              `${location.origin}${server.url}`.indexOf(url) === 0 ||\n              server.url.indexOf(url) === 0\n          ) === key\n      )\n      .map((server) => ({\n        ...server,\n        url:\n          server.url.indexOf('/') === 0\n            ? `${location.origin}${server.url}`\n            : server.url,\n      })),\n  }));\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { AxiosRequestConfig } from 'axios';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SwaggerUI from 'swagger-ui-react';\nimport 'swagger-ui-react/swagger-ui.css';\nimport { onLoadOneApi } from '../store/actions';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Facebook } from 'react-content-loader';\nimport { CardBody } from '@patternfly/react-core/dist/dynamic/components/Card';\nimport { Card } from '@patternfly/react-core/dist/dynamic/components/Card';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core/dist/dynamic/components/Breadcrumb';\nimport { Modal } from '@patternfly/react-core/dist/dynamic/components/Modal';\nimport {\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core/dist/dynamic/components/Button';\nimport {\n  Level,\n  LevelItem,\n} from '@patternfly/react-core/dist/dynamic/layouts/Level';\nimport {\n  Split,\n  SplitItem,\n} from '@patternfly/react-core/dist/dynamic/layouts/Split';\nimport {\n  Text,\n  TextContent,\n} from '@patternfly/react-core/dist/dynamic/components/Text';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/dynamic/icons/external-link-alt-icon';\nimport ReactJson from '@microlink/react-json-view';\nimport { useQuery } from '../Utilities/hooks';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { BASENAME } from '../Utilities/const';\nimport { ReduxState } from '../store/store';\nimport { Icon } from '@patternfly/react-core/dist/dynamic/components/Icon';\n\nconst Detail = () => {\n  const dispatch = useDispatch();\n  const loaded = useSelector(({ detail: { loaded } }: ReduxState) => loaded);\n  const spec = useSelector(({ detail: { spec } }: ReduxState) => spec);\n  const error = useSelector(({ detail: { error } }: ReduxState) => error);\n  const latest = useSelector(({ detail: { latest } }: ReduxState) => latest);\n  const { apiName, version = 'v1' } = useParams();\n  const navigate = useNavigate();\n  const query = useQuery();\n  const { auth } = useChrome();\n  useEffect(() => {\n    dispatch(\n      onLoadOneApi({\n        name: apiName!,\n        version,\n        url: query.get('url')!,\n        github: {\n          owner: query.get('github-owner')!,\n          repo: query.get('github-repo')!,\n          content: query.get('github-content')!,\n        },\n      })\n    );\n  }, []);\n\n  const requestInterceptor = useCallback(\n    async (req: AxiosRequestConfig) => {\n      req.headers = {\n        ...(req.headers || {}),\n        Authorization: `Bearer ${await auth.getToken()}`,\n      };\n      return req;\n    },\n    [auth]\n  );\n\n  const [isOpen, onModalToggle] = useState(false);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle\n          title={\n            <React.Fragment>\n              <Breadcrumb>\n                <BreadcrumbItem>\n                  <Link to={BASENAME}>Overview</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem isActive>{apiName}</BreadcrumbItem>\n              </Breadcrumb>\n              <React.Fragment>\n                {loaded && !error && (\n                  <Level className=\"ins-c-docs__api-detail\">\n                    <LevelItem className=\"ins-c-docs__api-detail-info\">\n                      {loaded ? (\n                        `Detail of ${spec?.info?.title}`\n                      ) : (\n                        <Skeleton size={SkeletonSize.md} />\n                      )}\n                    </LevelItem>\n                    <LevelItem>\n                      <Split hasGutter>\n                        <SplitItem className=\"ins-c-docs__api-detail-info\">\n                          {loaded && !error ? (\n                            <TextContent>\n                              <Text\n                                component=\"a\"\n                                href={`${\n                                  latest.includes('https://')\n                                    ? ''\n                                    : location.origin\n                                }${latest}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                Open Raw\n                                <Icon size=\"sm\">\n                                  <ExternalLinkAltIcon />\n                                </Icon>\n                              </Text>\n                            </TextContent>\n                          ) : (\n                            <Skeleton size={SkeletonSize.md} />\n                          )}\n                        </SplitItem>\n                        <SplitItem className=\"ins-c-docs__api-detail-info\">\n                          {loaded ? (\n                            <Button\n                              onClick={() => onModalToggle(true)}\n                              variant={ButtonVariant.secondary}\n                            >\n                              Show JSON\n                            </Button>\n                          ) : (\n                            <Skeleton size={SkeletonSize.md} />\n                          )}\n                        </SplitItem>\n                      </Split>\n                    </LevelItem>\n                  </Level>\n                )}\n              </React.Fragment>\n            </React.Fragment>\n          }\n        />\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          <Card>\n            <CardBody>\n              {loaded && (\n                <SwaggerUI\n                  docExpansion=\"list\"\n                  {...(query.get('readonly') && {\n                    supportedSubmitMethods: [''],\n                  })}\n                  spec={spec}\n                  requestInterceptor={requestInterceptor}\n                  onComplete={(system) => {\n                    const {\n                      layoutActions: { show },\n                    } = system;\n                    system.layoutActions.show = (\n                      isShownKey: string[],\n                      isShown: boolean\n                    ) => {\n                      const newHash = CSS.escape(isShownKey.join('-'));\n                      const oldHash = location.hash?.replace('#', '');\n                      show(isShownKey, isShown);\n                      if (isShown && newHash !== oldHash) {\n                        navigate(\n                          `${BASENAME}/${apiName}/${version}?${query.toString()}#${newHash}`,\n                          { replace: true }\n                        );\n                      }\n                    };\n\n                    if (location.hash && location.hash.length > 0) {\n                      const found = document.querySelector(\n                        `[id$='${location.hash\n                          .replace('#', '')\n                          .replace(/\\\\./g, '\\\\\\\\.')}']`\n                      );\n                      if (found) {\n                        found.scrollIntoView();\n                        show(\n                          location.hash\n                            .replace('#', '')\n                            .replace(/\\\\/g, '')\n                            .split('-'),\n                          true\n                        );\n                      }\n                    }\n                  }}\n                />\n              )}\n              {!loaded && <Facebook />}\n            </CardBody>\n          </Card>\n        </React.Fragment>\n      </Main>\n      <Modal\n        width={'50%'}\n        title=\"Spec JSON\"\n        isOpen={isOpen}\n        onClose={() => onModalToggle(false)}\n        actions={[\n          <Button\n            key=\"close\"\n            variant={ButtonVariant.secondary}\n            onClick={() => onModalToggle(false)}\n          >\n            Close\n          </Button>,\n        ]}\n      >\n        <ReactJson\n          displayDataTypes={false}\n          shouldCollapse={({ name }) => name !== 'root' && name !== 'paths'}\n          src={spec}\n          enableClipboard={({ src }) =>\n            navigator.clipboard.writeText(JSON.stringify(src, null, 2))\n          }\n        />\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default Detail;\n","import { useLocation } from 'react-router-dom';\nexport const useQuery = () => new URLSearchParams(useLocation().search);\n","import { LOAD_ALL, LOAD_ONE_API, SELECT_ROW } from './actionTypes';\nimport { activeApi, oneApi } from '../api';\nimport { GitHubConfig, Row } from './store';\n\nexport const onLoadApis = (isBeta: boolean, isProd: boolean) => ({\n  type: LOAD_ALL,\n  payload: activeApi(isBeta, isProd),\n});\n\nexport const onLoadOneApi = (data: {\n  name: string;\n  version?: string;\n  url?: string;\n  github?: Partial<GitHubConfig>;\n}) => ({\n  type: LOAD_ONE_API,\n  payload: oneApi(data),\n});\n\nexport const onSelectRow = (data: {\n  isSelected: boolean;\n  row: Row[] | Row;\n}) => ({\n  type: SELECT_ROW,\n  payload: data,\n});\n"],"names":["BASENAME","activeApi","isBeta","isProd","get","then","data","services","Object","keys","filter","oneAppKey","api","map","appName","isValidGithub","item","owner","repo","content","oneApi","name","version","url","defaultUrl","github","appVersion","spec","isGithub","Buffer","from","toString","getSpec","latest","servers","server","key","array","findIndex","location","origin","indexOf","dispatch","loaded","detail","error","apiName","useParams","navigate","useNavigate","query","URLSearchParams","useLocation","search","auth","useChrome","useEffect","requestInterceptor","useCallback","async","req","headers","Authorization","getToken","isOpen","onModalToggle","useState","PageHeader","className","PageHeaderTitle","title","Breadcrumb","BreadcrumbItem","Link","to","isActive","Level","LevelItem","info","Skeleton","size","md","Split","hasGutter","SplitItem","TextContent","Text","component","href","includes","target","rel","Icon","Button","onClick","variant","ButtonVariant","secondary","Main","Card","CardBody","docExpansion","supportedSubmitMethods","onComplete","system","layoutActions","show","isShownKey","isShown","newHash","CSS","escape","join","oldHash","hash","replace","length","found","document","querySelector","scrollIntoView","split","Modal","width","onClose","actions","displayDataTypes","shouldCollapse","src","enableClipboard","navigator","clipboard","writeText","JSON","stringify","onLoadApis","type","payload","onLoadOneApi","onSelectRow"],"sourceRoot":""}