{"version":3,"file":"js/Detail.15c82a95900178f5b077.js","mappings":"gXAoCMA,EAAS,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACzB,GAAoCC,EAAAA,EAAAA,aAA5BC,EAAR,EAAQA,QAAR,IAAiBC,QAAAA,OAAjB,MAA2B,KAA3B,GACAC,EAAAA,EAAAA,YAAU,WACRL,EAAQG,EAASC,KAChB,IAEH,OAAgCE,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAeC,EAAf,KACA,OACE,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAYC,UAAU,cACpB,kBAAC,IAAD,CACEC,MACE,kBAAC,aAAD,KACE,kBAAC,EAAAC,WAAD,KACE,kBAAC,EAAAC,eAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT,aAEF,kBAAC,EAAAF,eAAD,CAAgBG,UAAQ,GAAEZ,IAE5B,kBAAC,aAAD,KACGF,EAAOe,SAAWf,EAAOgB,OACxB,kBAAC,EAAAC,MAAD,CAAOT,UAAU,0BACf,kBAAC,EAAAU,UAAD,CAAWV,UAAU,+BAClBR,EAAOe,OAAP,oBACcf,EAAOmB,KAAKC,KAAKX,OAE9B,kBAAC,IAAD,CAAUY,KAAMC,EAAAA,EAAAA,MAGpB,kBAAC,EAAAJ,UAAD,KACE,kBAAC,EAAAK,MAAD,CAAOC,OAAO,MACZ,kBAAC,EAAAC,UAAD,CAAWjB,UAAU,+BAClBR,EAAOe,SAAWf,EAAOgB,MACxB,kBAAC,EAAAU,YAAD,KACE,kBAAC,EAAAC,KAAD,CACEC,UAAU,IACVC,KAAI,UAAKC,SAASC,QAAd,OAAuB/B,EAAOgC,QAClCC,OAAO,SACPC,IAAI,uBAJN,YAMW,kBAAC,KAAD,CAAqBb,KAAK,SAIvC,kBAAC,IAAD,CAAUA,KAAMC,EAAAA,EAAAA,QAGpB,kBAAC,EAAAG,UAAD,CAAWjB,UAAU,+BAClBR,EAAOe,OACN,kBAAC,EAAAoB,OAAD,CACEC,QAAS,kBAAM7B,GAAc,IAC7B8B,QAASC,EAAAA,cAAAA,WAFX,aAOA,kBAAC,IAAD,CAAUjB,KAAMC,EAAAA,EAAAA,cAYtC,kBAAC,IAAD,KACE,kBAAC,aAAD,KACE,kBAAC,EAAAiB,KAAD,KACE,kBAAC,EAAAC,SAAD,KACGxC,EAAOe,QACN,kBAAC,IAAD,CACE0B,aAAW,EACXC,aAAa,OACbvB,KAAMnB,EAAOmB,KACbwB,WAAY,SAACC,GACX,IACmBC,EACfD,EADFE,cAAiBD,KAanB,GAXAD,EAAOE,cAAcD,KAAO,SAACE,EAAYC,GACvCC,QAAQC,aACN,GACA,GAFF,UAGKpB,SAASqB,SAHd,YAG0BC,IAAIC,OAC1BN,EAAWO,KAAK,QAGpBT,EAAKE,EAAYC,IAGflB,SAASyB,MAAQzB,SAASyB,KAAKC,OAAS,EAAG,CAC7C,IAAMC,EAAQC,SAASC,cAAT,gBACH7B,SAASyB,KACfK,QAAQ,IAAK,IACbA,QAAQ,OAAQ,SAHP,OAKVH,IACFA,EAAMI,iBACNhB,EACEf,SAASyB,KACNK,QAAQ,IAAK,IACbA,QAAQ,MAAO,IACfE,MAAM,MACT,SAOV9D,EAAOe,QAAU,kBAAC,KAAD,UAK3B,kBAAC,EAAAgD,MAAD,CACEC,MAAO,MACPvD,MAAM,YACNH,OAAQA,EACR2D,QAAS,kBAAM1D,GAAc,IAC7B2D,QAAS,CACP,kBAAC,EAAA/B,OAAD,CACEgC,IAAI,QACJ9B,QAASC,EAAAA,cAAAA,UACTF,QAAS,kBAAM7B,GAAc,KAH/B,WASF,kBAAC,IAAD,CACE6D,kBAAkB,EAClBC,eAAgB,gBAAGC,EAAH,EAAGA,KAAH,MAAuB,SAATA,GAA4B,UAATA,GACjDC,IAAKvE,EAAOmB,UAOtBrB,EAAO0E,UAAY,CACjBzE,QAAS0E,IAAAA,KACTzE,OAAQyE,IAAAA,MAAgB,CACtB1D,OAAQ0D,IAAAA,KACRtD,KAAMsD,IAAAA,OACNzD,MAAOyD,IAAAA,KACPzC,OAAQyC,IAAAA,UAGZ3E,EAAO4E,aAAe,CACpB3E,QAAS,aACTC,OAAQ,CACNe,QAAQ,IAIZ,SAAe4D,EAAAA,EAAAA,UACb,kBAAiB,CACf3E,OADF,EAAGA,WAGH,SAAC4E,GAAD,MAAe,CACb7E,QAAS,SAAC8E,EAAK1E,GAAN,OAAkByE,GAASE,EAAAA,EAAAA,IAAa,CAAER,KAAMO,EAAK1E,QAAAA,SALlE,CAOEL,I","sources":["webpack:///./src/routes/Detail.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport SwaggerUI from 'swagger-ui-react';\nimport 'swagger-ui-react/swagger-ui.css';\nimport { onLoadOneApi } from '../store/actions';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Facebook } from 'react-content-loader';\nimport {\n  CardBody,\n  Card,\n  Breadcrumb,\n  BreadcrumbItem,\n  Modal,\n  Button,\n  Level,\n  LevelItem,\n  ButtonVariant,\n  Split,\n  SplitItem,\n  TextContent,\n  Text,\n} from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport ReactJson from 'react-json-view';\n\nconst Detail = ({ loadApi, detail }) => {\n  const { apiName, version = 'v1' } = useParams();\n  useEffect(() => {\n    loadApi(apiName, version);\n  }, []);\n\n  const [isOpen, onModalToggle] = useState(false);\n  return (\n    <React.Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle\n          title={\n            <React.Fragment>\n              <Breadcrumb>\n                <BreadcrumbItem>\n                  <Link to=\"/\">Overview</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem isActive>{apiName}</BreadcrumbItem>\n              </Breadcrumb>\n              <React.Fragment>\n                {detail.loaded && !detail.error && (\n                  <Level className=\"ins-c-docs__api-detail\">\n                    <LevelItem className=\"ins-c-docs__api-detail-info\">\n                      {detail.loaded ? (\n                        `Detail of ${detail.spec.info.title}`\n                      ) : (\n                        <Skeleton size={SkeletonSize.md} />\n                      )}\n                    </LevelItem>\n                    <LevelItem>\n                      <Split gutter=\"sm\">\n                        <SplitItem className=\"ins-c-docs__api-detail-info\">\n                          {detail.loaded && !detail.error ? (\n                            <TextContent>\n                              <Text\n                                component=\"a\"\n                                href={`${location.origin}${detail.latest}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                Open Raw <ExternalLinkAltIcon size=\"sm\" />\n                              </Text>\n                            </TextContent>\n                          ) : (\n                            <Skeleton size={SkeletonSize.mdmd} />\n                          )}\n                        </SplitItem>\n                        <SplitItem className=\"ins-c-docs__api-detail-info\">\n                          {detail.loaded ? (\n                            <Button\n                              onClick={() => onModalToggle(true)}\n                              variant={ButtonVariant.secondary}\n                            >\n                              Show JSON\n                            </Button>\n                          ) : (\n                            <Skeleton size={SkeletonSize.md} />\n                          )}\n                        </SplitItem>\n                      </Split>\n                    </LevelItem>\n                  </Level>\n                )}\n              </React.Fragment>\n            </React.Fragment>\n          }\n        />\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          <Card>\n            <CardBody>\n              {detail.loaded && (\n                <SwaggerUI\n                  deepLinking\n                  docExpansion=\"list\"\n                  spec={detail.spec}\n                  onComplete={(system) => {\n                    const {\n                      layoutActions: { show },\n                    } = system;\n                    system.layoutActions.show = (isShownKey, isShown) => {\n                      history.replaceState(\n                        {},\n                        '',\n                        `${location.pathname}#${CSS.escape(\n                          isShownKey.join('-')\n                        )}`\n                      );\n                      show(isShownKey, isShown);\n                    };\n\n                    if (location.hash && location.hash.length > 0) {\n                      const found = document.querySelector(\n                        `[id$='${location.hash\n                          .replace('#', '')\n                          .replace(/\\\\./g, '\\\\\\\\.')}']`\n                      );\n                      if (found) {\n                        found.scrollIntoView();\n                        show(\n                          location.hash\n                            .replace('#', '')\n                            .replace(/\\\\/g, '')\n                            .split('-'),\n                          true\n                        );\n                      }\n                    }\n                  }}\n                />\n              )}\n              {!detail.loaded && <Facebook />}\n            </CardBody>\n          </Card>\n        </React.Fragment>\n      </Main>\n      <Modal\n        width={'50%'}\n        title=\"Spec JSON\"\n        isOpen={isOpen}\n        onClose={() => onModalToggle(false)}\n        actions={[\n          <Button\n            key=\"close\"\n            variant={ButtonVariant.secondary}\n            onClick={() => onModalToggle(false)}\n          >\n            Close\n          </Button>,\n        ]}\n      >\n        <ReactJson\n          displayDataTypes={false}\n          shouldCollapse={({ name }) => name !== 'root' && name !== 'paths'}\n          src={detail.spec}\n        />\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nDetail.propTypes = {\n  loadApi: PropTypes.func,\n  detail: PropTypes.shape({\n    loaded: PropTypes.bool,\n    spec: PropTypes.string,\n    error: PropTypes.bool,\n    latest: PropTypes.string,\n  }),\n};\nDetail.defaultProps = {\n  loadApi: () => undefined,\n  detail: {\n    loaded: false,\n  },\n};\n\nexport default connect(\n  ({ detail }) => ({\n    detail,\n  }),\n  (dispatch) => ({\n    loadApi: (api, version) => dispatch(onLoadOneApi({ name: api, version })),\n  })\n)(Detail);\n"],"names":["Detail","loadApi","detail","useParams","apiName","version","useEffect","useState","isOpen","onModalToggle","className","title","Breadcrumb","BreadcrumbItem","Link","to","isActive","loaded","error","Level","LevelItem","spec","info","size","SkeletonSize","Split","gutter","SplitItem","TextContent","Text","component","href","location","origin","latest","target","rel","Button","onClick","variant","ButtonVariant","Card","CardBody","deepLinking","docExpansion","onComplete","system","show","layoutActions","isShownKey","isShown","history","replaceState","pathname","CSS","escape","join","hash","length","found","document","querySelector","replace","scrollIntoView","split","Modal","width","onClose","actions","key","displayDataTypes","shouldCollapse","name","src","propTypes","PropTypes","defaultProps","connect","dispatch","api","onLoadOneApi"],"sourceRoot":""}