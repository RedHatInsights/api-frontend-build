{"version":3,"file":"js/664.ef5cb4e8b79ead530eff.js","mappings":"0HAAO,IAAMA,EAAiB,MAEjBC,EAAgB,CAC3B,mBAAoB,OACpB,0BAA2B,OAC3B,iCAAkC,OAClC,0BAA2B,OAC3BC,OAAQ,O,8wBCHV,IAAMC,EAAe,CAAEC,QAAQ,EAAOC,aAAc,CAAC,GAC/CC,EAAe,CAAC,uBAAwB,YAAa,WAErDC,EAAa,SAACC,GAAO,OACxBA,EAAQC,IAAIC,OAASF,EAAQC,IAAIC,MAAM,IAAOF,EAAQG,OAAO,EAuEnDC,GAAWC,EAAAA,EAAAA,KAAgB,yBAEhCC,EAAAA,GAAgB,eAvExB,SAAoBC,EAAO,GAAa,IAAXC,EAAO,EAAPA,QAC3B,OAAO,EAAP,KACKD,GAAK,IACRE,UACED,GACAA,EAAQJ,SACLM,QACC,SAACV,GAAO,OACLF,EAAaa,SAASX,EAAQG,YAC7BH,EAAQC,IAAIW,QAAUC,SAASC,OAAOF,SAAS,IAEpDG,KAAI,SAACf,GAAO,sBACRA,GAAO,IACVgB,QACEvB,EAAAA,EAAcM,EAAWC,MAAaA,SAAY,QAAL,EAAPA,EAASC,WAAG,OAAU,QAAV,EAAZ,EAAcgB,gBAAQ,WAAf,EAAP,EAAyB,IACjEd,QAASJ,EAAWC,GACpBkB,QAASlB,EAAQC,IAAIiB,SAAO,IAElCtB,QAAQ,GAEZ,KAmDiD,mBACzCU,EAAAA,GAAgB,aAAa,kBAAMX,CAAY,cAClDW,EAAAA,IA1CL,SAAqBC,EAAO,GAAkC,QAAhCC,QAAWW,EAAU,EAAVA,WAAYC,EAAG,EAAHA,IAC7CvB,EAAe,EAAH,KACZU,EAAMV,cAAgB,CAAC,GACvBwB,MAAMC,QAAQF,GACdA,EAAIG,QACF,SAACC,EAAKC,GAAI,cACLD,GAAG,wBACFJ,EAAIM,SAAW,UAAY,IAAE,OAAGD,EAAKE,MAAM,GAAGC,OAAK,GACrDT,WAAAA,EACAhB,QAASsB,EAAKE,MAAM,GAAGC,MACvBC,IAAKJ,EAAKE,MAAM,GAAGC,MACnBZ,QAASS,EAAKE,MAAM,GAAGC,OACnBH,EAAKC,UAAY,CACnBA,SAAUD,EAAKC,YAChB,GAGL,CAAC,IACF,oBAEKN,EAAIM,SAAW,UAAY,IAAE,OAAGN,EAAIO,MAAM,GAAGC,OAAK,GACpDT,WAAAA,EACAhB,QAASiB,EAAIO,MAAM,GAAGC,MACtBC,IAAKT,EAAIO,MAAM,GAAGC,MAClBZ,QAASI,EAAIO,MAAM,GAAGC,OAClBR,EAAIM,UAAY,CAClBA,SAAUN,EAAIM,aAM1B,OAAO,EAAP,KACKnB,GAAK,IACRV,aAAAA,GAEJ,IAMqC,GAEnCF,GAGWmC,GAASzB,EAAAA,EAAAA,KAAgB,yBAE9BC,EAAAA,EAAoB,eA1D5B,SAAsBC,EAAO,GAAqC,QAAnCC,QAAWuB,EAAM,EAANA,OAAWvB,GAAO,YAC1D,OAAO,EAAP,KACKD,GAAK,IACRyB,KAAMxB,EACNuB,OAAAA,EACAnC,QAAQ,GAEZ,KAmDuD,mBAC/CU,EAAAA,EAAoB,aAAa,iBAAO,CAAEV,QAAQ,EAAO,KAAC,mBAC1DU,EAAAA,EAAoB,cAAc,iBAAO,CAAEV,QAAQ,EAAMqC,OAAO,EAAM,IAAC,GAE7EtC,GCvFWuC,GAAkBC,EAAAA,EAAAA,eAAc,CAC3CC,YAAa,WAAO,IAGf,SAASC,IAAoB,2BAAZC,EAAU,yBAAVA,EAAU,gBAChC,IAAMC,EAAW,IAAIC,EAAAA,GAAgB,CAAC,EAAG,CACvCC,KACAC,EAAAA,EAAAA,IAAwB,CACtBC,oBAAqB,CAAC,SAAU,YAChC,eACCL,EAAW5B,QAAO,SAACkC,GAAI,YAAqB,IAATA,CAAoB,OAW5D,OARAL,EAASM,SAAS,CAAEzC,SAAAA,EAAU0B,OAAAA,EAAQgB,cAAeC,EAAAA,KAQ9CR,CACT,C,0BC3BMS,GAAWC,EAAAA,EAAAA,OAAK,kBACpB,wEAA8D,IAE1DC,GAASD,EAAAA,EAAAA,OAAK,kBAClB,wEAA0D,IAS/CE,EAAS,WACpB,OACE,kBAAC,EAAAC,SAAQ,CAACC,SAAU,kBAAC,EAAAC,SAAQ,OAC3B,kBAAC,SAAS,KACR,kBAAC,EAAAC,MAAK,CAACC,KARL,aAQyBC,QAAS,kBAACP,EAAM,QAC3C,kBAAC,EAAAK,MAAK,CAACC,KARI,sBAQyBC,QAAS,kBAACP,EAAM,QACpD,kBAAC,EAAAK,MAAK,CAACC,KAXH,IAWyBC,QAAS,kBAACT,EAAQ,SAIvD,E,WCLA,QAdY,WACV,IAAQU,GAAwBC,EAAAA,EAAAA,KAAxBD,oBAKR,OAJAE,EAAAA,EAAAA,YAAU,WACRF,EAAoB,oBACtB,GAAG,CAACA,IAGF,kBAAC,aAAc,KACb,kBAAC,KAAmB,MACpB,kBAACP,EAAM,MAGb,E,4CCXMU,EAAW,SAAH,GAAkB,IAAZC,EAAK,EAALA,MAEZvB,GAAWwB,EAAAA,EAAAA,QAAOD,EAAQzB,EAAK2B,KAAU3B,KAC/C,OACE,kBAACH,EAAgB+B,SAAQ,CACvBrC,MAAO,CACLQ,YAAa,kBAAMG,EAAS2B,OAAO,IAGrC,kBAAC,KAAQ,CAACC,MAAO5B,EAAS2B,QAAQE,YAChC,kBAAC,EAAG,OAIZ,EAEAP,EAASQ,UAAY,CACnBP,MAAOQ,IAAAA,MAGT,UCvBAC,IAAAA,OAAgB,kBAAC,EAAQ,MAAKC,SAASC,eAAe,Q,qDCJ/C,IAAMC,EAAW,WACXC,EAAe,eACfC,EAAa,Y","sources":["webpack:///./src/api/constants.js","webpack:///./src/store/reducers.js","webpack:///./src/store/index.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/store/actionTypes.js"],"sourcesContent":["export const DEFAULT_PREFIX = 'api';\n\nexport const versionMapper = {\n  'aiops-clustering': 'v1.0',\n  'aiops-idle-cost-savings': 'v1.0',\n  'aiops-instance-type-validation': 'v1.0',\n  'aiops-outlier-detection': 'v1.0',\n  xavier: 'v1.0',\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport * as ACTIONS from './actionTypes';\nimport { versionMapper } from '../api/constants';\n\nconst defaultState = { loaded: false, selectedRows: {} };\nconst disabledApis = ['automation-analytics', 'openshift', 'ruledev'];\n\nconst getAppName = (service) =>\n  (service.api.alias && service.api.alias[0]) || service.appName;\n\nfunction dataLoaded(state, { payload }) {\n  return {\n    ...state,\n    endpoints:\n      payload &&\n      payload.services\n        .filter(\n          (service) =>\n            !disabledApis.includes(service.appName) &&\n            (!service.api.isBeta || insights.chrome.isBeta())\n        )\n        .map((service) => ({\n          ...service,\n          version:\n            versionMapper[getAppName(service)] || service?.api?.versions?.[0],\n          appName: getAppName(service),\n          apiName: service.api.apiName,\n        })),\n    loaded: true,\n  };\n}\n\nfunction detailLoaded(state, { payload: { latest, ...payload } }) {\n  return {\n    ...state,\n    spec: payload,\n    latest,\n    loaded: true,\n  };\n}\n\nfunction onSelectRow(state, { payload: { isSelected, row } }) {\n  const selectedRows = {\n    ...(state.selectedRows || {}),\n    ...(Array.isArray(row)\n      ? row.reduce(\n          (acc, curr) => ({\n            ...acc,\n            [`${row.subItems ? 'parent-' : ''}${curr.cells[0].value}`]: {\n              isSelected,\n              appName: curr.cells[0].value,\n              url: curr.cells[1].value,\n              version: curr.cells[2].value,\n              ...(curr.subItems && {\n                subItems: curr.subItems,\n              }),\n            },\n          }),\n          {}\n        )\n      : {\n          [`${row.subItems ? 'parent-' : ''}${row.cells[0].value}`]: {\n            isSelected,\n            appName: row.cells[0].value,\n            url: row.cells[1].value,\n            version: row.cells[2].value,\n            ...(row.subItems && {\n              subItems: row.subItems,\n            }),\n          },\n        }),\n  };\n\n  return {\n    ...state,\n    selectedRows,\n  };\n}\n\nexport const services = applyReducerHash(\n  {\n    [`${ACTIONS.LOAD_ALL}_FULFILLED`]: dataLoaded,\n    [`${ACTIONS.LOAD_ALL}_PENDING`]: () => defaultState,\n    [ACTIONS.SELECT_ROW]: onSelectRow,\n  },\n  defaultState\n);\n\nexport const detail = applyReducerHash(\n  {\n    [`${ACTIONS.LOAD_ONE_API}_FULFILLED`]: detailLoaded,\n    [`${ACTIONS.LOAD_ONE_API}_PENDING`]: () => ({ loaded: false }),\n    [`${ACTIONS.LOAD_ONE_API}_REJECTED`]: () => ({ loaded: true, error: true }),\n  },\n  defaultState\n);\n","import { createContext } from 'react';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { services, detail } from './reducers';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  const registry = new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorDescriptionKey: ['detail', 'stack'],\n    }),\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register({ services, detail, notifications: notificationsReducer });\n\n  //If you want to register all of your reducers, this is good place.\n  /*\n   *  registry.register({\n   *    someName: (state, action) => ({...state})\n   *  });\n   */\n  return registry;\n}\n","import { Route, Routes as DomRoutes } from 'react-router-dom';\nimport React, { lazy, Suspense, Fragment } from 'react';\nconst Overview = lazy(() =>\n  import(/* webpackChunkName: \"Overview\" */ './routes/Overview')\n);\nconst Detail = lazy(() =>\n  import(/* webpackChunkName: \"Detail\" */ './routes/Detail')\n);\n\nconst paths = {\n  overview: '*',\n  detail: ':apiName/*',\n  detailVersioned: ':apiName/:version/*',\n};\n\nexport const Routes = () => {\n  return (\n    <Suspense fallback={<Fragment />}>\n      <DomRoutes>\n        <Route path={paths.detail} element={<Detail />} />\n        <Route path={paths.detailVersioned} element={<Detail />} />\n        <Route path={paths.overview} element={<Overview />} />\n      </DomRoutes>\n    </Suspense>\n  );\n};\n","import React, { useEffect } from 'react';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n  const { updateDocumentTitle } = useChrome();\n  useEffect(() => {\n    updateDocumentTitle('API Documentation');\n  }, [updateDocumentTitle]);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React, { useRef } from 'react';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport PropTypes from 'prop-types';\nimport logger from 'redux-logger';\n\nconst AppEntry = ({ isDev }) => {\n  // cannot be in a render as it will create multiple store instances during a render and a race condition when accessing the context\n  const registry = useRef(isDev ? init(logger) : init());\n  return (\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry.current,\n      }}\n    >\n      <Provider store={registry.current.getStore()}>\n        <App />\n      </Provider>\n    </RegistryContext.Provider>\n  );\n};\n\nAppEntry.propTypes = {\n  isDev: PropTypes.bool,\n};\n\nexport default AppEntry;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nReactDOM.render(<AppEntry />, document.getElementById('root'));\n","export const LOAD_ALL = 'LOAD_ALL';\nexport const LOAD_ONE_API = 'LOAD_ONE_API';\nexport const SELECT_ROW = 'SELECT_ROW';\n"],"names":["DEFAULT_PREFIX","versionMapper","xavier","defaultState","loaded","selectedRows","disabledApis","getAppName","service","api","alias","appName","services","applyReducerHash","ACTIONS","state","payload","endpoints","filter","includes","isBeta","insights","chrome","map","version","versions","apiName","isSelected","row","Array","isArray","reduce","acc","curr","subItems","cells","value","url","detail","latest","spec","error","RegistryContext","createContext","getRegistry","init","middleware","registry","ReducerRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","item","register","notifications","notificationsReducer","Overview","lazy","Detail","Routes","Suspense","fallback","Fragment","Route","path","element","updateDocumentTitle","useChrome","useEffect","AppEntry","isDev","useRef","logger","Provider","current","store","getStore","propTypes","PropTypes","ReactDOM","document","getElementById","LOAD_ALL","LOAD_ONE_API","SELECT_ROW"],"sourceRoot":""}